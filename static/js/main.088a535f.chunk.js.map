{"version":3,"sources":["Animals.tsx","../../src/index.tsx","MockedData.tsx","Birds.tsx","App.tsx","index.tsx"],"names":["Type","AuxLink","props","history","useHistory","useState","determineClassname","componentName","useEffect","location","setClassName","console","className","getClassName","onClick","oldPath","regex","RegExp","link","AuxMainLink","match","useRouteMatch","to","newPath","getPath","activeStyle","activeClassName","AuxHashRouter","React","AuxMainRoute","path","component","AuxRoute","Animals","name","animals","map","animal","index","key","alt","src","image","type","Cat","componentValue","description","Dog","Parrot","Owl","Cats","age","owner","food","Dogs","Parrots","Owls","Birds","App","SwipeableDrawer","anchor","variant","open","onClose","onOpen","componentExactValue","f","delimiter","length","Modal","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.088a535f.chunk.js","sourcesContent":["import React from 'react'\r\nimport { AuxLink } from 'aux-router'\r\nimport { Animal } from './Models'\r\n\r\nexport enum Type {\r\n  Cat,\r\n  Dog,\r\n  Parrot,\r\n  Owl\r\n}\r\n\r\ninterface AnimalsProps {\r\n  name: string\r\n  animals: Animal[]\r\n  type: Type\r\n}\r\n\r\nconst Animals = (props: AnimalsProps) => {\r\n  return (\r\n    <section>\r\n      <h1>{props.name}</h1>\r\n      <ul>\r\n        {props.animals.map((animal, index) => {\r\n          return (\r\n            <li key={`${index}${animal.name}`}>\r\n              <img alt={animal.name} src={animal.image} />\r\n              <div>\r\n                <h2>{animal.name}</h2>\r\n                {props.type === Type.Cat && (\r\n                  <AuxLink\r\n                    componentName='modal-cat'\r\n                    componentValue={animal.name}\r\n                    description='Open modal'\r\n                  />\r\n                )}\r\n                {props.type === Type.Dog && (\r\n                  <AuxLink\r\n                    componentName='panel-dog'\r\n                    componentValue={animal.name}\r\n                    description='Open panel'\r\n                  />\r\n                )}\r\n                {props.type === Type.Parrot && (\r\n                  <AuxLink\r\n                    componentName='panel-parrot'\r\n                    componentValue={animal.name}\r\n                    description='Open panel'\r\n                  />\r\n                )}\r\n                {props.type === Type.Owl && (\r\n                  <AuxLink\r\n                    componentName='modal-owl'\r\n                    componentValue={animal.name}\r\n                    description='Open modal'\r\n                  />\r\n                )}\r\n              </div>\r\n            </li>\r\n          )\r\n        })}\r\n      </ul>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Animals\r\n","import * as React from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport {\r\n  useHistory,\r\n  BrowserRouter,\r\n  Route,\r\n  useRouteMatch,\r\n  NavLink,\r\n  HashRouter\r\n} from 'react-router-dom'\r\n\r\ninterface AuxLinkProps {\r\n  componentName: string\r\n  componentValue?: string\r\n  activeClassName?: string\r\n  description: string\r\n}\r\n\r\nexport const AuxLink = (props: AuxLinkProps) => {\r\n  const history = useHistory()\r\n  const [getClassName, setClassName] = useState<string>(determineClassname())\r\n\r\n  useEffect(() => {\r\n    return history.listen((location) => {\r\n      setClassName(determineClassname())\r\n      console.log(`You changed the page to: ${location.pathname}`)\r\n    })\r\n  }, [history])\r\n\r\n  function onClick(): void {\r\n    let oldPath = history.location.pathname\r\n    let componentName = props.componentName\r\n\r\n    let regex = new RegExp(`(${componentName}\\\\/[A-Za-z0-9_\\\\/\\\\-%$]*)`)\r\n\r\n    let foundComponent = oldPath.match(regex)\r\n    let link: string\r\n\r\n    if (foundComponent) {\r\n      link = oldPath.replace(\r\n        regex,\r\n        `${componentName}/${props.componentValue ? props.componentValue : ''}`\r\n      )\r\n    } else {\r\n      link =\r\n        oldPath +\r\n        `(${componentName}/${props.componentValue ? props.componentValue : ''})`\r\n    }\r\n    history.push(link)\r\n  }\r\n\r\n  function determineClassname(): string {\r\n    if (\r\n      history.location.pathname.indexOf(\r\n        `(${props.componentName}/${\r\n          props.componentValue ? props.componentValue : ''\r\n        })`\r\n      ) >= 0\r\n    ) {\r\n      return props.activeClassName ? props.activeClassName : ''\r\n    }\r\n    return ''\r\n  }\r\n\r\n  return (\r\n    <a className={getClassName} onClick={onClick}>\r\n      {props.description}\r\n    </a>\r\n  )\r\n}\r\n\r\ninterface AuxMainLinkProps {\r\n  path: string\r\n  description: string\r\n  activeStyle?: React.CSSProperties\r\n  activeClassName?: string\r\n}\r\n\r\nexport const AuxMainLink = (props: AuxMainLinkProps) => {\r\n  const history = useHistory()\r\n  const match = useRouteMatch()\r\n\r\n  function getPath(): string {\r\n    let oldPath = history.location.pathname\r\n    let newPath: string\r\n    if (oldPath.indexOf('(') >= 0) {\r\n      newPath = props.path + oldPath.slice(oldPath.indexOf('('))\r\n    } else {\r\n      newPath = props.path\r\n    }\r\n    console.info(match)\r\n    if (newPath.indexOf('/') == 0) {\r\n      newPath = newPath.replace('/', '')\r\n    }\r\n    return '/' + newPath\r\n  }\r\n\r\n  return (\r\n    <NavLink\r\n      to={getPath()}\r\n      activeStyle={props.activeStyle}\r\n      activeClassName={props.activeClassName}\r\n    >\r\n      {props.description}\r\n    </NavLink>\r\n  )\r\n}\r\n\r\nexport const AuxRouter = (props: any) => {\r\n  return <BrowserRouter> {props.children}</BrowserRouter>\r\n}\r\n\r\nexport const AuxHashRouter = (props: any) => {\r\n  return <HashRouter> {props.children}</HashRouter>\r\n}\r\n\r\ninterface AuxMainRouteProps {\r\n  path: string\r\n  component?: any\r\n  children?: React.ReactNode\r\n}\r\n\r\nexport const AuxMainRoute = (props: AuxMainRouteProps) => {\r\n  const getPath = (): string => {\r\n    return `*${props.path}*`\r\n  }\r\n\r\n  return (\r\n    <Route path={getPath()} component={props.component}>\r\n      {props.children}\r\n    </Route>\r\n  )\r\n}\r\n\r\ninterface AuxRouteProps {\r\n  component?: any\r\n  componentName: string\r\n  componentValue?: string\r\n  componentExactValue?: string\r\n  children?: React.ReactNode\r\n}\r\n\r\nexport const AuxRoute = (props: AuxRouteProps) => {\r\n  const getPath = (): string => {\r\n    if (props.componentExactValue && props.componentValue) {\r\n      throw 'AuxRoute should have either componentValue or componentExactValue - not both at the same time!'\r\n    }\r\n    if (!props.componentValue && !props.componentExactValue) {\r\n      return `*\\\\(${props.componentName}*`\r\n    } else if (props.componentValue) {\r\n      return `*\\\\(${props.componentName}/${props.componentValue}*`\r\n    } else {\r\n      return `*\\\\(${props.componentName}/${props.componentExactValue}\\\\)*`\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Route path={getPath()} component={props.component}>\r\n      {props.children}\r\n    </Route>\r\n  )\r\n}\r\n","import { Animal } from './Models'\r\n\r\nexport const Cats: Animal[] = [\r\n  {\r\n    name: 'Bella',\r\n    age: 3,\r\n    image: '/aux-router/cat1.png',\r\n    owner: {\r\n      name: 'John',\r\n      age: 34\r\n    },\r\n    food: [{ name: 'fish' }]\r\n  },\r\n  {\r\n    name: 'Kitty',\r\n    age: 2,\r\n    image: '/aux-router/cat2.png',\r\n    owner: {\r\n      name: 'Joanna',\r\n      age: 19\r\n    },\r\n    food: [{ name: 'meat' }]\r\n  },\r\n  {\r\n    name: 'Charlie',\r\n    age: 5,\r\n    image: '/aux-router/cat3.png',\r\n    owner: {\r\n      name: 'Adam',\r\n      age: 58\r\n    },\r\n    food: [{ name: 'milk' }, { name: 'white cheese' }]\r\n  },\r\n  {\r\n    name: 'Leo',\r\n    age: 3,\r\n    image: '/aux-router/cat4.png',\r\n    owner: {\r\n      name: 'Albert',\r\n      age: 24\r\n    },\r\n    food: [{ name: 'meat' }]\r\n  },\r\n  {\r\n    name: 'Milo',\r\n    age: 1,\r\n    image: '/aux-router/cat5.png',\r\n    owner: {\r\n      name: 'Grace',\r\n      age: 62\r\n    },\r\n    food: [{ name: 'milk' }]\r\n  }\r\n]\r\n\r\nexport const Dogs: Animal[] = [\r\n  {\r\n    name: 'Bean',\r\n    age: 5,\r\n    image: '/aux-router/dog1.png',\r\n    owner: {\r\n      name: 'Kamil',\r\n      age: 26\r\n    },\r\n    food: [{ name: 'meat' }]\r\n  },\r\n  {\r\n    name: 'Bella',\r\n    age: 2,\r\n    image: '/aux-router/dog2.png',\r\n    owner: {\r\n      name: 'Selin',\r\n      age: 32\r\n    },\r\n    food: [{ name: 'meat' }]\r\n  },\r\n  {\r\n    name: 'Axel',\r\n    age: 5,\r\n    image: '/aux-router/dog3.png',\r\n    owner: {\r\n      name: 'Victor',\r\n      age: 16\r\n    },\r\n    food: [{ name: 'meat' }]\r\n  },\r\n  {\r\n    name: 'Odie',\r\n    age: 3,\r\n    image: '/aux-router/dog4.png',\r\n    owner: {\r\n      name: 'Liza',\r\n      age: 52\r\n    },\r\n    food: [{ name: 'meat' }]\r\n  },\r\n  {\r\n    name: 'Sheba',\r\n    age: 1,\r\n    image: '/aux-router/dog5.png',\r\n    owner: {\r\n      name: 'Leonardo',\r\n      age: 34\r\n    },\r\n    food: [{ name: 'meat' }]\r\n  }\r\n]\r\n\r\nexport const Parrots: Animal[] = [\r\n  {\r\n    name: 'Dakota',\r\n    age: 1,\r\n    image: '/aux-router/parrot1.png'\r\n  },\r\n  {\r\n    name: 'Jasper',\r\n    age: 3,\r\n    image: '/aux-router/parrot2.png'\r\n  },\r\n  {\r\n    name: 'Ollie',\r\n    age: 2,\r\n    image: '/aux-router/parrot3.png'\r\n  }\r\n]\r\n\r\nexport const Owls: Animal[] = [\r\n  {\r\n    name: 'Max',\r\n    age: 3,\r\n    image: '/aux-router/owl1.png'\r\n  },\r\n  {\r\n    name: 'Leo',\r\n    age: 2,\r\n    image: '/aux-router/owl2.png'\r\n  },\r\n  {\r\n    name: 'Luck',\r\n    age: 3,\r\n    image: '/aux-router/owl3.png'\r\n  }\r\n]\r\n","import React from 'react'\r\nimport { AuxMainLink, AuxMainRoute } from 'aux-router'\r\nimport Animals, { Type } from './Animals'\r\nimport { Owls, Parrots } from './MockedData'\r\n\r\nconst Birds = () => {\r\n  return (\r\n    <div>\r\n      <h2>Choose a type of birds:</h2>\r\n      <AuxMainLink\r\n        activeClassName='selected'\r\n        path='birds/parrots'\r\n        description='Parrots'\r\n      />\r\n      <AuxMainLink\r\n        activeClassName='selected'\r\n        path='birds/owls'\r\n        description='Owls'\r\n      />\r\n      <AuxMainRoute path='birds/parrots'>\r\n        <Animals type={Type.Parrot} animals={Parrots} name='Parrots' />\r\n      </AuxMainRoute>\r\n      <AuxMainRoute path='birds/owls'>\r\n        <Animals type={Type.Owl} animals={Owls} name='Owls' />\r\n      </AuxMainRoute>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Birds\r\n","import React from 'react'\r\nimport {\r\n  AuxHashRouter,\r\n  AuxMainRoute,\r\n  AuxMainLink,\r\n  AuxRoute,\r\n  AuxLink\r\n} from 'aux-router'\r\nimport Animals, { Type } from './Animals'\r\nimport { Cats, Dogs, Owls, Parrots } from './MockedData'\r\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer'\r\nimport Modal from '@material-ui/core/Modal'\r\nimport Birds from './Birds'\r\n\r\nconst App = () => {\r\n  return (\r\n    <AuxHashRouter>\r\n      <nav>\r\n        <AuxMainLink\r\n          activeClassName='selected'\r\n          path='/cats'\r\n          description='Cats'\r\n        />\r\n        <AuxMainLink\r\n          activeClassName='selected'\r\n          path='/dogs'\r\n          description='Dogs'\r\n        />\r\n        <AuxMainLink\r\n          activeClassName='selected'\r\n          path='/birds'\r\n          description='Birds'\r\n        />\r\n      </nav>\r\n      <AuxMainRoute path='/cats'>\r\n        <Animals type={Type.Cat} animals={Cats} name='Cats' />\r\n      </AuxMainRoute>\r\n      <AuxMainRoute path='/dogs'>\r\n        <Animals type={Type.Dog} animals={Dogs} name='Dogs' />\r\n      </AuxMainRoute>\r\n      <AuxMainRoute path='/birds' component={Birds} />\r\n      {Dogs.map((animal, index) => {\r\n        return (\r\n          <AuxRoute componentName='panel-dog' componentValue={animal.name}>\r\n            <SwipeableDrawer\r\n              anchor='right'\r\n              variant='persistent'\r\n              open={true}\r\n              onClose={() => {}}\r\n              onOpen={() => {}}\r\n              key={`${animal.name}-${index}`}\r\n            >\r\n              <div className='panel'>\r\n                <img src={animal.image} alt={animal.name} />\r\n                <div className='links'>\r\n                  <AuxLink\r\n                    activeClassName='selected'\r\n                    componentName='panel-dog'\r\n                    componentValue={`${animal.name}`}\r\n                    description='Details of dog'\r\n                  />\r\n                  <AuxLink\r\n                    activeClassName='selected'\r\n                    componentName='panel-dog'\r\n                    componentValue={`${animal.name}/${animal.name}-food`}\r\n                    description='Favourite dog`s food'\r\n                  />\r\n                  <AuxLink\r\n                    activeClassName='selected'\r\n                    componentName='panel-dog'\r\n                    componentValue={`${animal.name}/${animal.name}-owner`}\r\n                    description='Details of owner'\r\n                  />\r\n                </div>\r\n                <AuxRoute\r\n                  componentName='panel-dog'\r\n                  componentExactValue={animal.name}\r\n                >\r\n                  <p>Name: {animal.name}</p>\r\n                  <p>Age: {animal.age}</p>\r\n                </AuxRoute>\r\n                <AuxRoute\r\n                  componentName='panel-dog'\r\n                  componentValue={`${animal.name}/${animal.name}-owner`}\r\n                >\r\n                  <p>Name of the owner: {animal.owner?.name}</p>\r\n                  <p>Age of the owner: {animal.owner?.age}</p>\r\n                </AuxRoute>\r\n                <AuxRoute\r\n                  componentName='panel-dog'\r\n                  componentValue={`${animal.name}/${animal.name}-food`}\r\n                >\r\n                  <p className='food'>\r\n                    {animal.name}'s favourite food:{' '}\r\n                    {animal.food?.map((f, index) => {\r\n                      var delimiter =\r\n                        index !== animal.food!.length - 1 ? ', ' : ''\r\n                      return (\r\n                        <span key={`${f.name}-${index}`}>\r\n                          {f.name + delimiter}\r\n                        </span>\r\n                      )\r\n                    })}\r\n                  </p>\r\n                </AuxRoute>\r\n                <AuxLink componentName='panel-dog' description='Close' />\r\n              </div>\r\n            </SwipeableDrawer>\r\n          </AuxRoute>\r\n        )\r\n      })}\r\n      {Parrots.map((animal, index) => {\r\n        return (\r\n          <AuxRoute componentName='panel-parrot' componentValue={animal.name}>\r\n            <SwipeableDrawer\r\n              anchor='bottom'\r\n              variant='persistent'\r\n              open={true}\r\n              onClose={() => {}}\r\n              onOpen={() => {}}\r\n              key={`${animal.name}-${index}`}\r\n            >\r\n              <div className='panel'>\r\n                <img src={animal.image} alt={animal.name} />\r\n                <p>Name: {animal.name}</p>\r\n                <p>Age: {animal.age}</p>\r\n                <AuxLink componentName='panel-parrot' description='Close' />\r\n              </div>\r\n            </SwipeableDrawer>\r\n          </AuxRoute>\r\n        )\r\n      })}\r\n      {Cats.map((animal, index) => {\r\n        return (\r\n          <AuxRoute componentName='modal-cat' componentValue={animal.name}>\r\n            <Modal\r\n              open={true}\r\n              onClose={() => {}}\r\n              key={`${animal.name}-${index}`}\r\n            >\r\n              <div className='modal'>\r\n                <img src={animal.image} alt={animal.name} />\r\n                <div className='links'>\r\n                  <AuxLink\r\n                    activeClassName='selected'\r\n                    componentName='modal-cat'\r\n                    componentValue={`${animal.name}`}\r\n                    description='Details of cat'\r\n                  />\r\n                  <AuxLink\r\n                    activeClassName='selected'\r\n                    componentName='modal-cat'\r\n                    componentValue={`${animal.name}/${animal.name}-food`}\r\n                    description='Favourite cat`s food'\r\n                  />\r\n                  <AuxLink\r\n                    activeClassName='selected'\r\n                    componentName='modal-cat'\r\n                    componentValue={`${animal.name}/${animal.name}-owner`}\r\n                    description='Details of owner'\r\n                  />\r\n                </div>\r\n                <AuxRoute\r\n                  componentName='modal-cat'\r\n                  componentExactValue={animal.name}\r\n                >\r\n                  <p>Name: {animal.name}</p>\r\n                  <p>Age: {animal.age}</p>\r\n                </AuxRoute>\r\n                <AuxRoute\r\n                  componentName='modal-cat'\r\n                  componentValue={`${animal.name}/${animal.name}-owner`}\r\n                >\r\n                  <p>Name of the owner: {animal.owner?.name}</p>\r\n                  <p>Age of the owner: {animal.owner?.age}</p>\r\n                </AuxRoute>\r\n                <AuxRoute\r\n                  componentName='modal-cat'\r\n                  componentValue={`${animal.name}/${animal.name}-food`}\r\n                >\r\n                  <p className='food'>\r\n                    {animal.name}'s favourite food:{' '}\r\n                    {animal.food?.map((f, index) => {\r\n                      var delimiter =\r\n                        index !== animal.food!.length - 1 ? ', ' : ''\r\n                      return <span>{f.name + delimiter}</span>\r\n                    })}\r\n                  </p>\r\n                </AuxRoute>\r\n                <AuxLink componentName='modal-cat' description='Close' />\r\n              </div>\r\n            </Modal>\r\n          </AuxRoute>\r\n        )\r\n      })}\r\n      {Owls.map((animal, index) => {\r\n        return (\r\n          <AuxRoute componentName='modal-owl' componentValue={animal.name}>\r\n            <Modal\r\n              open={true}\r\n              onClose={() => {}}\r\n              key={`${animal.name}-${index}`}\r\n            >\r\n              <div className='modal'>\r\n                <img src={animal.image} alt={animal.name} />\r\n                <p>Name: {animal.name}</p>\r\n                <p>Age: {animal.age}</p>\r\n                <AuxLink componentName='modal-owl' description='Close' />\r\n              </div>\r\n            </Modal>\r\n          </AuxRoute>\r\n        )\r\n      })}\r\n    </AuxHashRouter>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}
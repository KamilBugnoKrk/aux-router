{"version":3,"sources":["Animals.tsx","../../src/index.tsx","MockedData.tsx","App.tsx","index.tsx"],"names":["Type","AuxLink","props","history","useHistory","match","useRouteMatch","onClick","oldPath","componentName","getComponentName","regex","RegExp","AuxMainLink","pathPrefix","newPath","AuxRouter","React","AuxMainRoute","path","component","AuxRoute","Animals","name","animals","map","animal","index","key","alt","src","image","type","Modal","componentValue","description","Panel","Cats","age","Dogs","App","SwipeableDrawer","anchor","variant","open","onClose","onOpen","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f25c2a95.chunk.js","sourcesContent":["import React from 'react'\r\nimport { AuxLink } from 'aux-router'\r\nimport { Animal } from './Models'\r\n\r\nexport enum Type {\r\n  Panel,\r\n  Modal\r\n}\r\n\r\ninterface AnimalsProps {\r\n  name: string\r\n  animals: Animal[]\r\n  type: Type\r\n}\r\n\r\nconst Animals = (props: AnimalsProps) => {\r\n  return (\r\n    <section>\r\n      <h1>{props.name}</h1>\r\n      <ul>\r\n        {props.animals.map((animal, index) => {\r\n          return (\r\n            <li key={`${index}${animal.name}`}>\r\n              <img alt={animal.name} src={animal.image} />\r\n              <div>\r\n                <h2>{animal.name}</h2>\r\n                {props.type === Type.Modal && (\r\n                  <AuxLink\r\n                    componentName='modal'\r\n                    componentValue={animal.name}\r\n                    description='Open modal'\r\n                  />\r\n                )}\r\n                {props.type === Type.Panel && (\r\n                  <AuxLink\r\n                    componentName='panel'\r\n                    componentValue={animal.name}\r\n                    description='Open panel'\r\n                  />\r\n                )}\r\n              </div>\r\n            </li>\r\n          )\r\n        })}\r\n      </ul>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Animals\r\n","import * as React from 'react'\r\nimport {\r\n  useHistory,\r\n  BrowserRouter,\r\n  Route,\r\n  useRouteMatch\r\n} from 'react-router-dom'\r\n\r\ninterface AuxLinkProps {\r\n  componentName?: string\r\n  componentValue?: string\r\n  description: string\r\n}\r\n\r\nexport const AuxLink = (props: AuxLinkProps) => {\r\n  const history = useHistory()\r\n  const match = useRouteMatch()\r\n\r\n  function getComponentName() {\r\n    if (match.url.lastIndexOf('(') < 0) {\r\n      throw 'AuxLink should have componentName if it is not within AuxRoute element!'\r\n    }\r\n    return match.url.substring(match.url.lastIndexOf('(') + 1)\r\n  }\r\n\r\n  function onClick(): void {\r\n    let oldPath = history.location.pathname\r\n    let componentName = props.componentName\r\n      ? props.componentName\r\n      : getComponentName()\r\n\r\n    let regex: RegExp\r\n    if (componentName.indexOf(')') >= 0) {\r\n      componentName = componentName.replace(')', '')\r\n      regex = new RegExp(`(${componentName})`)\r\n    } else {\r\n      regex = new RegExp(`(${componentName}\\\\/\\\\w*)`)\r\n    }\r\n    let foundComponent = oldPath.match(regex)\r\n\r\n    if (foundComponent) {\r\n      history.push(\r\n        oldPath.replace(\r\n          regex,\r\n          `${componentName}/${props.componentValue ? props.componentValue : ''}`\r\n        )\r\n      )\r\n    } else {\r\n      history.push(\r\n        oldPath +\r\n          `(${componentName}/${\r\n            props.componentValue ? props.componentValue : ''\r\n          })`\r\n      )\r\n    }\r\n  }\r\n\r\n  return <button onClick={onClick}>{props.description}</button>\r\n}\r\n\r\ninterface AuxMainLinkProps {\r\n  path: string\r\n  description: string\r\n}\r\n\r\nexport const AuxMainLink = (props: AuxMainLinkProps) => {\r\n  const history = useHistory()\r\n\r\n  function onClick(): void {\r\n    let oldPath = history.location.pathname\r\n    let newPath: string\r\n    let pathPrefix = ''\r\n    if (\r\n      oldPath.indexOf('/', 1) >= 0 &&\r\n      oldPath.indexOf('(', 1) >= oldPath.indexOf('/', 1)\r\n    ) {\r\n      pathPrefix =\r\n        '/' + oldPath.slice(1).slice(0, oldPath.slice(1).indexOf('/'))\r\n    }\r\n    if (oldPath.indexOf('(') >= 0) {\r\n      newPath = pathPrefix + props.path + oldPath.slice(oldPath.indexOf('('))\r\n    } else {\r\n      newPath = pathPrefix + props.path\r\n    }\r\n    history.push(newPath)\r\n  }\r\n\r\n  return <button onClick={onClick}>{props.description}</button>\r\n}\r\n\r\nexport const AuxRouter = (props: any) => {\r\n  return <BrowserRouter> {props.children}</BrowserRouter>\r\n}\r\n\r\ninterface AuxMainRouteProps {\r\n  path: string\r\n  component?: any\r\n  children: React.ReactNode\r\n}\r\n\r\nexport const AuxMainRoute = (props: AuxMainRouteProps) => {\r\n  const getPath = (): string => {\r\n    return `*${props.path}*`\r\n  }\r\n\r\n  return (\r\n    <Route path={getPath()} component={props.component}>\r\n      {props.children}\r\n    </Route>\r\n  )\r\n}\r\n\r\ninterface AuxRouteProps {\r\n  component?: any\r\n  componentName?: string\r\n  componentValue?: string\r\n  children: React.ReactNode\r\n}\r\n\r\nexport const AuxRoute = (props: AuxRouteProps) => {\r\n  const match = useRouteMatch()\r\n\r\n  const getPath = (): string => {\r\n    if (!props.componentValue) {\r\n      return `*\\\\(${props.componentName}`\r\n    } else if (match.url && match.url != '/') {\r\n      return `*${match.url.replace(/[(]/g, `\\\\(`).replace(/[)]/, `\\\\)`)}/${\r\n        props.componentValue\r\n      }\\\\)*`\r\n    } else {\r\n      return `*\\\\(${props.componentName}/${props.componentValue}\\\\)*`\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Route path={getPath()} component={props.component}>\r\n      {props.children}\r\n    </Route>\r\n  )\r\n}\r\n","import { Animal } from './Models'\r\n\r\nexport const Cats: Animal[] = [\r\n  {\r\n    name: 'Bella',\r\n    age: 3,\r\n    image: '/cat1.png'\r\n  },\r\n  {\r\n    name: 'Kitty',\r\n    age: 2,\r\n    image: '/cat2.png'\r\n  },\r\n  {\r\n    name: 'Charlie',\r\n    age: 5,\r\n    image: '/cat3.png'\r\n  },\r\n  {\r\n    name: 'Leo',\r\n    age: 3,\r\n    image: '/cat4.png'\r\n  },\r\n  {\r\n    name: 'Milo',\r\n    age: 1,\r\n    image: '/cat5.png'\r\n  }\r\n]\r\n\r\nexport const Dogs: Animal[] = [\r\n  {\r\n    name: 'Bean',\r\n    age: 5,\r\n    image: '/dog1.png'\r\n  },\r\n  {\r\n    name: 'Bella',\r\n    age: 2,\r\n    image: '/dog2.png'\r\n  },\r\n  {\r\n    name: 'Axel',\r\n    age: 5,\r\n    image: '/dog3.png'\r\n  },\r\n  {\r\n    name: 'Odie',\r\n    age: 3,\r\n    image: '/dog4.png'\r\n  },\r\n  {\r\n    name: 'Sheba',\r\n    age: 1,\r\n    image: '/dog5.png'\r\n  }\r\n]\r\n","import React from 'react'\r\nimport {\r\n  AuxRouter,\r\n  AuxMainRoute,\r\n  AuxMainLink,\r\n  AuxRoute,\r\n  AuxLink\r\n} from 'aux-router'\r\nimport Animals, { Type } from './Animals'\r\nimport { Cats, Dogs } from './MockedData'\r\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer'\r\nimport Modal from '@material-ui/core/Modal'\r\n\r\nconst App = () => {\r\n  return (\r\n    <AuxRouter>\r\n      <nav>\r\n        <AuxMainLink path='/aux-router/cats' description='Cats' />\r\n        <AuxMainLink path='/aux-router/dogs' description='Dogs' />\r\n      </nav>\r\n      <AuxMainRoute path='/cats'>\r\n        <Animals type={Type.Modal} animals={Cats} name='Cats' />\r\n      </AuxMainRoute>\r\n      <AuxMainRoute path='/dogs'>\r\n        <Animals type={Type.Panel} animals={Dogs} name='Dogs' />\r\n      </AuxMainRoute>\r\n      {Dogs.map((animal) => {\r\n        return (\r\n          <AuxRoute componentName='panel' componentValue={animal.name}>\r\n            <SwipeableDrawer\r\n              anchor='right'\r\n              variant='persistent'\r\n              open={true}\r\n              onClose={() => {}}\r\n              onOpen={() => {}}\r\n            >\r\n              <div className='panel'>\r\n                <img src={animal.image} alt={animal.name} />\r\n                <p>Name: {animal.name}</p>\r\n                <p>Age: {animal.age}</p>\r\n                <AuxLink componentName='panel' description='Close' />\r\n              </div>\r\n            </SwipeableDrawer>\r\n          </AuxRoute>\r\n        )\r\n      })}\r\n      {Cats.map((animal) => {\r\n        return (\r\n          <AuxRoute componentName='modal' componentValue={animal.name}>\r\n            <Modal open={true} onClose={() => {}}>\r\n              <div className='modal'>\r\n                <img src={animal.image} alt={animal.name} />\r\n                <p>Name: {animal.name}</p>\r\n                <p>Age: {animal.age}</p>\r\n                <AuxLink componentName='modal' description='Close' />\r\n              </div>\r\n            </Modal>\r\n          </AuxRoute>\r\n        )\r\n      })}\r\n    </AuxRouter>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}